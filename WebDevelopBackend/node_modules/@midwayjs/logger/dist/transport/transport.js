"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EmptyTransport = exports.Transport = void 0;
const util_1 = require("util");
const util_2 = require("../util");
const constants_1 = require("../constants");
class Transport {
    constructor(options = {}) {
        this.options = options;
        this.pid = process.pid;
    }
    setLoggerOptions(options) {
        this.loggerOptions = options;
        this.options.level = this.options.level || options.level;
        this.options.format = this.options.format || options.format;
        this.options.contextFormat =
            this.options.contextFormat || options.contextFormat;
        this.options.eol = this.options.eol || options.eol;
    }
    format(level, meta, args) {
        const info = this.getLoggerInfo(level, meta, args);
        // support buffer
        if (Buffer.isBuffer(info.args[0])) {
            return info.args[0];
        }
        // for write and ignore format
        if (level === false) {
            return (0, util_1.format)(info.message);
        }
        const customContextFormat = meta.contextFormat || this.options.contextFormat;
        // for context logger
        if (meta.ctx && customContextFormat) {
            return customContextFormat(info);
        }
        const customFormat = meta.format || this.options.format;
        if (customFormat) {
            return customFormat(info);
        }
        if (level) {
            return (0, util_1.format)('%s %s %s %s', info.timestamp, info.LEVEL, info.pid, info.message);
        }
        else {
            return (0, util_1.format)(info.message);
        }
    }
    getLoggerInfo(level, meta, args) {
        const levelString = level || '';
        const info = {
            level: levelString,
            pid: this.pid,
        };
        Object.defineProperties(info, {
            timestamp: {
                get() {
                    return (0, util_2.getFormatDate)(new Date());
                },
                enumerable: false,
            },
            LEVEL: {
                get() {
                    return constants_1.LEVEL[levelString] || '';
                },
                enumerable: false,
            },
            args: {
                get() {
                    return args;
                },
                enumerable: false,
            },
            originArgs: {
                get() {
                    return args;
                },
                enumerable: false,
            },
            message: {
                get() {
                    return (0, util_1.format)(...args);
                },
                enumerable: false,
            },
            ctx: {
                get() {
                    return meta.ctx;
                },
                enumerable: false,
            },
            originError: {
                get() {
                    return args.find(arg => arg instanceof Error);
                },
                enumerable: false,
            },
            meta: {
                get() {
                    return meta;
                },
                enumerable: false,
            },
        });
        return info;
    }
    get level() {
        return this.options.level;
    }
    set level(level) {
        this.options.level = level;
    }
}
exports.Transport = Transport;
/**
 * @deprecated
 */
class EmptyTransport extends Transport {
    log(level, ...args) { }
    close() { }
}
exports.EmptyTransport = EmptyTransport;
//# sourceMappingURL=transport.js.map