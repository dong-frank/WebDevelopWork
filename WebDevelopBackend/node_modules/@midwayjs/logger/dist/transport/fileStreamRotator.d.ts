import { StreamOptions } from '../interface';
export declare class FileStreamRotator {
    /**
     * Returns frequency metadata
     * @param frequency
     * @returns {*}
     */
    getFrequency(frequency: any): false | {
        type: any;
        digit: number;
    };
    /**
     * Returns a number based on the option string
     * @param size
     * @returns {Number}
     */
    parseFileSize(size: any): number;
    /**
     * Returns date string for a given format / dateFormat
     * @param format
     * @param dateFormat
     * @param {boolean} utc
     * @returns {string}
     */
    getDate(format: any, dateFormat: any, utc: any): string;
    /**
     * Read audit json object from disk or return new object or null
     * @param maxLogs
     * @param auditFile
     * @param log_file
     * @returns {Object} auditLogSettings
     * @property {Object} auditLogSettings.keep
     * @property {Boolean} auditLogSettings.keep.days
     * @property {Number} auditLogSettings.keep.amount
     * @property {String} auditLogSettings.auditLog
     * @property {Array} auditLogSettings.files
     */
    setAuditLog(maxLogs: any, auditFile: any, log_file: any): any;
    /**
     * Write audit json object to disk
     * @param {Object} audit
     * @param {Object} audit.keep
     * @param {Boolean} audit.keep.days
     * @param {Number} audit.keep.amount
     * @param {String} audit.auditLog
     * @param {Array} audit.files
     * @param {String} audit.hashType
     */
    writeAuditLog(audit: any): void;
    /**
     * Write audit json object to disk
     * @param {String} logfile
     * @param {Object} audit
     * @param {Object} audit.keep
     * @param {Boolean} audit.keep.days
     * @param {Number} audit.keep.amount
     * @param {String} audit.auditLog
     * @param {String} audit.hashType
     * @param {Array} audit.files
     * @param {EventEmitter} stream
     */
    addLogToAudit(logfile: any, audit: any, stream: any): any;
    /**
     *
     * @param options
     * @returns {Object} stream
     */
    getStream(options: StreamOptions): any;
}
export declare class FileStreamRotatorManager {
    private static streamPool;
    private static loggerRef;
    static enabled: boolean;
    static getStream(options: StreamOptions): any;
    static close(stream: any): void;
    static clear(): void;
}
//# sourceMappingURL=fileStreamRotator.d.ts.map