/// <reference types="node" />
import { BaseTransportOptions, ITransport, LoggerInfo, LoggerLevel, LoggerOptions, LogMeta } from '../interface';
export declare abstract class Transport<TransportOptions extends BaseTransportOptions> implements ITransport {
    protected readonly options: TransportOptions;
    protected loggerOptions: LoggerOptions;
    protected readonly pid: number;
    constructor(options?: TransportOptions);
    setLoggerOptions(options: LoggerOptions): void;
    format(level: LoggerLevel | false, meta: LogMeta, args: any[]): string | Record<string, any> | Buffer;
    getLoggerInfo(level: LoggerLevel | false, meta: LogMeta, args: any[]): LoggerInfo;
    get level(): LoggerLevel;
    set level(level: LoggerLevel);
    abstract log(level: LoggerLevel | false, meta: LogMeta, ...args: any[]): void;
    abstract close(): any;
}
/**
 * @deprecated
 */
export declare class EmptyTransport extends Transport<any> {
    log(level: LoggerLevel | false, ...args: any[]): void;
    close(): void;
}
//# sourceMappingURL=transport.d.ts.map