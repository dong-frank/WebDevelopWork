import { ContextLoggerOptions, ILogger, LegacyLoggerOptions, LoggerFactoryOptions, LoggerOptions } from './interface';
export declare class LoggerFactory extends Map<string, ILogger> {
    protected factoryOptions: LoggerFactoryOptions;
    constructor(factoryOptions?: LoggerFactoryOptions);
    createLogger(name: string, options: LoggerOptions & LegacyLoggerOptions): ILogger;
    addLogger(name: string, logger: ILogger, errorWhenReplace?: boolean): ILogger;
    getLogger(name: string): ILogger;
    removeLogger(name: string): void;
    get(name: any): ILogger;
    /**
     * Closes a `Logger` instance with the specified `name` if it exists.
     * If no `name` is supplied then all Loggers are closed.
     * @param {?string} name - The id of the Logger instance to close.
     * @returns {undefined}
     */
    close(name?: string): void;
    getDefaultMidwayLoggerConfig(appInfo: {
        pkg: Record<string, any>;
        name: string;
        baseDir: string;
        appDir: string;
        HOME: string;
        root: string;
        env: string;
    }): {
        midwayLogger: {
            default: {
                fileLogName: string;
                errorLogName: string;
                dir: string;
                auditFileDir: string;
                transports: {
                    console: boolean | {
                        autoColors: true;
                    };
                    file: {
                        bufferWrite: boolean;
                    };
                    error: {
                        bufferWrite: boolean;
                    };
                };
            };
            clients: {
                coreLogger: {
                    fileLogName: string;
                };
                appLogger: {};
            };
        };
    };
    createContextLogger(ctx: any, appLogger: ILogger, options?: ContextLoggerOptions): ILogger;
}
//# sourceMappingURL=factory.d.ts.map