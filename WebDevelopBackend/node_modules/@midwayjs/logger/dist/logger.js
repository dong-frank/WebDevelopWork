"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MidwayChildLogger = exports.MidwayContextLogger = exports.MidwayLogger = exports.TransportManager = void 0;
const util_1 = require("./util");
const os_1 = require("os");
const transport_1 = require("./transport/transport");
const console_1 = require("./transport/console");
const file_1 = require("./transport/file");
exports.TransportManager = new Map();
exports.TransportManager.set('console', console_1.ConsoleTransport);
exports.TransportManager.set('file', file_1.FileTransport);
exports.TransportManager.set('error', file_1.ErrorTransport);
exports.TransportManager.set('json', file_1.JSONTransport);
class MidwayLogger {
    constructor(options = {}) {
        this.transports = new Map();
        this.closeHandlers = [];
        options = (0, util_1.formatLegacyLoggerOptions)(options);
        this.options = options;
        this.options.level = this.options.level || 'silly';
        this.options.eol = this.options.eol || os_1.EOL;
        if (this.options.transports) {
            for (const name in this.options.transports) {
                this.add(name, this.options.transports[name]);
            }
        }
    }
    get level() {
        return this.options.level;
    }
    set level(level) {
        this.options.level = level;
    }
    log(level, ...args) {
        this.transit(level, {}, ...args);
    }
    debug(...args) {
        this.transit('debug', {}, ...args);
    }
    info(...args) {
        this.transit('info', {}, ...args);
    }
    warn(...args) {
        this.transit('warn', {}, ...args);
    }
    error(...args) {
        this.transit('error', {}, ...args);
    }
    verbose(...args) {
        this.transit('verbose', {}, ...args);
    }
    write(...args) {
        this.transit(false, {}, ...args);
    }
    silly(...args) {
        this.transit('silly', {}, ...args);
    }
    add(name, transport) {
        if (transport) {
            let transportInstance;
            if (!(transport instanceof transport_1.Transport)) {
                if (!exports.TransportManager.has(name)) {
                    throw new Error(`Transport ${name} is not supported`);
                }
                else {
                    transportInstance = new (exports.TransportManager.get(name))(transport);
                }
            }
            else {
                transportInstance = transport;
            }
            transportInstance.setLoggerOptions(this.options);
            this.transports.set(name, transportInstance);
        }
    }
    get(name) {
        return this.transports.get(name);
    }
    remove(name, options = {}) {
        if (this.transports.has(name)) {
            if (options.close === undefined || options.close) {
                this.transports.get(name).close();
            }
            this.transports.delete(name);
        }
    }
    close() {
        // close all transports
        for (const name of this.transports.keys()) {
            this.remove(name, {
                close: true,
            });
        }
        for (const closeHandler of this.closeHandlers) {
            closeHandler();
        }
    }
    onClose(closeHandler) {
        this.closeHandlers.push(closeHandler);
    }
    createContextLogger(ctx, options = {}) {
        return new MidwayContextLogger(ctx, this, options);
    }
    transit(level, meta = {}, ...args) {
        // if level is not allowed, ignore
        if (level !== false && !(0, util_1.isEnableLevel)(level, this.level)) {
            return;
        }
        // transit to transport
        for (const transport of this.transports.values()) {
            transport.log(level, meta, ...args);
        }
    }
    getChild(meta = {}) {
        return new MidwayChildLogger(this, meta);
    }
}
exports.MidwayLogger = MidwayLogger;
class MidwayContextLogger {
    constructor(ctx, parentLogger, options = {}) {
        this.ctx = ctx;
        this.parentLogger = parentLogger;
        this.options = options;
    }
    debug(...args) {
        this.transit('debug', ...args);
    }
    info(...args) {
        this.transit('info', ...args);
    }
    warn(...args) {
        this.transit('warn', ...args);
    }
    error(...args) {
        this.transit('error', ...args);
    }
    verbose(...args) {
        this.transit('verbose', ...args);
    }
    write(...args) {
        this.transit(false, ...args);
    }
    transit(level, ...args) {
        this.parentLogger.transit(level, {
            ctx: this.ctx,
            contextFormat: this.options.contextFormat,
        }, ...args);
    }
    getContext() {
        return this.ctx;
    }
}
exports.MidwayContextLogger = MidwayContextLogger;
class MidwayChildLogger {
    constructor(parentLogger, meta = {}) {
        this.parentLogger = parentLogger;
        this.meta = meta;
    }
    debug(...args) {
        this.transit('debug', ...args);
    }
    info(...args) {
        this.transit('info', ...args);
    }
    warn(...args) {
        this.transit('warn', ...args);
    }
    error(...args) {
        this.transit('error', ...args);
    }
    verbose(...args) {
        this.transit('verbose', ...args);
    }
    write(...args) {
        this.transit(false, ...args);
    }
    transit(level, ...args) {
        this.parentLogger.transit(level, this.meta, ...args);
    }
}
exports.MidwayChildLogger = MidwayChildLogger;
//# sourceMappingURL=logger.js.map