"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MidwayBaseLogger = exports.MidwayLoggerContainer = exports.createConsoleLogger = exports.createFileLogger = exports.createLogger = exports.clearAllLoggers = exports.loggers = void 0;
const factory_1 = require("./factory");
const logger_1 = require("./logger");
__exportStar(require("./interface"), exports);
__exportStar(require("./logger"), exports);
__exportStar(require("./transport/transport"), exports);
__exportStar(require("./transport/file"), exports);
__exportStar(require("./transport/console"), exports);
__exportStar(require("./transport/fileStreamRotator"), exports);
__exportStar(require("./factory"), exports);
__exportStar(require("./util"), exports);
exports.loggers = new factory_1.LoggerFactory();
const clearAllLoggers = () => {
    exports.loggers.close();
};
exports.clearAllLoggers = clearAllLoggers;
const createLogger = (name, options = {}) => {
    return exports.loggers.createLogger(name, options);
};
exports.createLogger = createLogger;
const createFileLogger = (name, options) => {
    return exports.loggers.createLogger(name, {
        transports: {
            file: {
                dir: __dirname,
                fileLogName: 'custom-logger.log',
                ...options,
            },
        },
    });
};
exports.createFileLogger = createFileLogger;
const createConsoleLogger = (name, options = {}) => {
    return exports.loggers.createLogger(name, {
        transports: {
            console: options,
        },
    });
};
exports.createConsoleLogger = createConsoleLogger;
/**
 * @deprecated
 */
exports.MidwayLoggerContainer = factory_1.LoggerFactory;
/**
 * @deprecated
 */
exports.MidwayBaseLogger = logger_1.MidwayLogger;
//# sourceMappingURL=index.js.map