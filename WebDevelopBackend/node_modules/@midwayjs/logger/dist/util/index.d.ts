import { LegacyLoggerOptions, LoggerLevel, LoggerOptions } from '../interface';
export declare function isEnableLevel(inputLevel: LoggerLevel | false, baseLevel: LoggerLevel): boolean;
/**
 * Returns frequency metadata for minute/hour rotation
 * @param type
 * @param num
 * @returns {*}
 * @private
 */
export declare function checkNumAndType(type: any, num: any): false | {
    type: any;
    digit: number;
};
/**
 * Returns frequency metadata for defined frequency
 * @param freqType
 * @returns {*}
 * @private
 */
export declare function checkDailyAndTest(freqType: any): false | {
    type: any;
    digit: number;
};
/**
 * Check and make parent directory
 * @param pathWithFile
 */
export declare function mkDirForFile(pathWithFile: any): void;
/**
 * Create symbolic link to current log file
 * @param {String} logfile
 * @param {String} name Name to use for symbolic link
 */
export declare function createCurrentSymLink(logfile: any, name: any): void;
/**
 * Removes old log file
 * @param file
 * @param file.hash
 * @param file.name
 * @param file.date
 * @param file.hashType
 */
export declare function removeFile(file: any): void;
export declare function isValidFileName(filename: any): boolean;
export declare function isValidDirName(dirname: any): boolean;
export declare function getMaxSize(size: any): string;
export declare function throwIf(options: any, ...args: any[]): void;
export declare function debounce(func: () => void, wait: number, immediate?: any): any;
export declare const isDevelopmentEnvironment: (env: any) => boolean;
/**
 * 仅兼容老的 enableXXX 配置，这部分配置无法对应到新的配置
 * @param unknownLoggerOptions
 */
export declare function formatLoggerOptions(unknownLoggerOptions: LoggerOptions): LoggerOptions;
/**
 * 转换老的配置项到新的配置
 * @param unknownLoggerOptions
 */
export declare function formatLegacyLoggerOptions(unknownLoggerOptions: LoggerOptions & LegacyLoggerOptions): LoggerOptions;
/**
 * Bubbles events to the proxy
 * @param emitter
 * @param proxy
 * @constructor
 */
export declare function BubbleEvents(emitter: any, proxy: any): void;
export declare function isWin32(): boolean;
/**
 * 不使用 dayjs 实现格式化，因为 dayjs 会有性能问题
 * 生成 YYYY-MM-DD HH:mm:ss.SSS 格式的时间
 * @param date
 */
export declare function getFormatDate(date: Date): string;
//# sourceMappingURL=index.d.ts.map