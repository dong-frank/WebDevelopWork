"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.InfoService = void 0;
const core_1 = require("@midwayjs/core");
const core_2 = require("@midwayjs/core");
const utils_1 = require("./utils");
const os_1 = require("os");
const path_1 = require("path");
const pm = require("picomatch");
let InfoService = class InfoService {
    async init() {
        this.secretMatchList = Array.from(new Set(this.defaultHiddenKey)).map(pattern => {
            return pm(pattern);
        });
    }
    info(infoValueType) {
        const info = [];
        info.push(this.projectInfo());
        info.push(this.systemInfo());
        info.push(this.resourceOccupationInfo());
        info.push(this.softwareInfo());
        info.push(this.midwayConfig());
        info.push(this.midwayService());
        info.push(this.timeInfo());
        info.push(this.envInfo());
        info.push(this.dependenciesInfo());
        info.push(this.networkInfo());
        if (infoValueType === 'html') {
            return (0, utils_1.renderToHtml)(info, this.titleConfig);
        }
        return info;
    }
    projectInfo() {
        return {
            type: 'Project',
            info: {
                Project: this.midwayInformationService.getProjectName(),
                AppDir: this.midwayInformationService.getAppDir(),
                BaseDir: this.midwayInformationService.getBaseDir(),
                Root: this.midwayInformationService.getRoot(),
                Env: this.environment.getCurrentEnvironment(),
            },
        };
    }
    systemInfo() {
        const _platform = process.platform;
        return {
            type: 'System',
            info: {
                Platform: _platform === 'win32' ? 'Windows' : _platform,
                Node: process.versions.node,
                V8: process.versions.v8,
                ProcessId: process.pid,
                Arch: process.arch,
                Hostname: (0, os_1.hostname)(),
                HomeDir: (0, os_1.homedir)(),
                CWD: process.cwd(),
                ExecCommand: [].concat(process.argv, process.execArgv).join(' '),
            },
        };
    }
    resourceOccupationInfo() {
        const memory = process.memoryUsage();
        const cpu = (0, os_1.cpus)();
        return {
            type: 'Memory & CPU',
            info: {
                'Memory Total Occupy': (0, utils_1.bitToMB)(memory.rss),
                'Heap Total Occupy': (0, utils_1.bitToMB)(memory.heapTotal),
                'Heap Used': (0, utils_1.bitToMB)(memory.heapUsed),
                'V8 C++ Object Memory': (0, utils_1.bitToMB)(memory.external),
                'System Total Memory': (0, utils_1.bitToMB)((0, os_1.totalmem)()),
                CPU: `${cpu[0] ? `${cpu[0].model} ${cpu[0].speed}MHz` : ''} ${cpu.length} core `,
                'CPU Usage': cpu
                    .map(cpuInfo => {
                    const times = cpuInfo.times;
                    return (((1 -
                        times.idle /
                            (times.idle +
                                times.user +
                                times.nice +
                                times.sys +
                                times.irq)) *
                        100).toFixed(2) + '%');
                })
                    .join(' / '),
            },
        };
    }
    softwareInfo() {
        const npmModuleList = [
            '@midwayjs/core',
            '@midwayjs/decorator',
            '@midwayjs/faas',
        ];
        const info = {};
        for (const modName of npmModuleList) {
            const modulePkg = this.midwayInformationService.getPkg();
            if (modulePkg) {
                info[modName] = modulePkg.version;
            }
        }
        return {
            type: 'Software',
            info,
        };
    }
    envInfo() {
        const env = {};
        Object.keys(process.env).forEach(envName => {
            env[envName] = this.filterSecretContent(envName, process.env[envName]);
        });
        return {
            type: 'Environment Variable',
            info: env,
        };
    }
    timeInfo() {
        const t = new Date().toString().split(' ');
        return {
            type: 'Time',
            info: {
                Current: Date.now(),
                Uptime: (0, os_1.uptime)(),
                Timezone: t.length >= 7 ? t[5] : '',
                TimezoneName: t.length >= 7
                    ? t.slice(6).join(' ').replace(/\(/g, '').replace(/\)/g, '')
                    : '',
            },
        };
    }
    networkInfo() {
        const net = (0, os_1.networkInterfaces)();
        const info = {};
        Object.keys(net).forEach(type => {
            const netItemList = net[type];
            let newType = type;
            if (type[type.length - 1] === '0') {
                newType = type.slice(0, -1);
            }
            // ignore localhost
            if (newType === 'lo') {
                return;
            }
            info[newType] = netItemList
                .sort(item => {
                if (item.family === 'IPv4') {
                    return -1;
                }
                return 1;
            })
                .map(netItem => {
                return `${netItem.family} ${netItem.address}`;
            })
                .join(' / ');
        });
        return {
            type: 'Network',
            info,
        };
    }
    dependenciesInfo() {
        const pkg = this.midwayInformationService.getPkg();
        const dependencies = pkg.dependencies || {};
        const info = {};
        Object.keys(dependencies).forEach(modName => {
            const modInfo = (0, utils_1.safeRequire)((0, path_1.join)(modName, 'package.json'), {});
            info[modName] = `${modInfo.version || 'Not Found'}(${dependencies[modName]})`;
        });
        return {
            type: 'Dependencies',
            info,
        };
    }
    midwayService() {
        var _a;
        const info = {};
        if ((_a = this.container) === null || _a === void 0 ? void 0 : _a.registry) {
            for (const item of this.container.registry) {
                const [key, value] = item;
                const name = value ? (value === null || value === void 0 ? void 0 : value.name) || value : typeof value;
                info[key] = `${(value === null || value === void 0 ? void 0 : value.namespace) ? `${value === null || value === void 0 ? void 0 : value.namespace}:` : ''}${name}${(value === null || value === void 0 ? void 0 : value.scope) ? ` [${value === null || value === void 0 ? void 0 : value.scope}]` : ''}`;
            }
        }
        return {
            type: 'Midway Service',
            info,
        };
    }
    midwayConfig() {
        const info = {};
        const config = this.configService.getConfiguration() || {};
        Object.keys(config).forEach(key => {
            info[key] = this.safeJson(this.filterSecretContent(key, config[key]));
        });
        return {
            type: 'Midway Config',
            info,
        };
    }
    filterSecretContent(key, value) {
        if (typeof value === 'string') {
            const find = this.secretMatchList.some(isMatch => {
                return isMatch(key.toLowerCase());
            });
            if (find) {
                return (0, utils_1.safeContent)(value);
            }
        }
        else if (Array.isArray(value)) {
            return value.map(item => {
                return this.filterSecretContent(key, item);
            });
        }
        return value;
    }
    safeJson(value) {
        switch (typeof value) {
            case 'string':
                return `"${value}"`;
            case 'number':
                return `${value}`;
            case 'boolean':
                return String(value);
            case 'object':
                if (!value) {
                    return 'null';
                }
                if (Array.isArray(value)) {
                    return `[${value.map(item => this.safeJson(item)).join(',')}]`;
                }
                if (value instanceof RegExp) {
                    return `"${value.toString()}"`;
                }
                // eslint-disable-next-line no-case-declarations
                const props = [];
                for (const key in value) {
                    props.push(`"${key}":${this.safeJson(this.filterSecretContent(key, value[key]))}`);
                }
                return `{${props.join(',')}}`;
            case 'function':
                return `function ${value.name}(${value.length} args)`;
        }
        return '';
    }
};
__decorate([
    (0, core_1.Inject)(),
    __metadata("design:type", core_2.MidwayInformationService)
], InfoService.prototype, "midwayInformationService", void 0);
__decorate([
    (0, core_1.Inject)(),
    __metadata("design:type", core_2.MidwayConfigService)
], InfoService.prototype, "configService", void 0);
__decorate([
    (0, core_1.Inject)(),
    __metadata("design:type", core_2.MidwayEnvironmentService)
], InfoService.prototype, "environment", void 0);
__decorate([
    (0, core_1.Config)('info.title'),
    __metadata("design:type", Object)
], InfoService.prototype, "titleConfig", void 0);
__decorate([
    (0, core_1.Config)('info.hiddenKey'),
    __metadata("design:type", Array)
], InfoService.prototype, "defaultHiddenKey", void 0);
__decorate([
    (0, core_1.ApplicationContext)(),
    __metadata("design:type", Object)
], InfoService.prototype, "container", void 0);
__decorate([
    (0, core_1.Init)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], InfoService.prototype, "init", null);
InfoService = __decorate([
    (0, core_1.Provide)(),
    (0, core_1.Scope)(core_1.ScopeEnum.Singleton)
], InfoService);
exports.InfoService = InfoService;
//# sourceMappingURL=infoService.js.map