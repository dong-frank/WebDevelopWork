"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UploadConfiguration = void 0;
const core_1 = require("@midwayjs/core");
const DefaultConfig = require("./config/config.default");
const middleware_1 = require("./middleware");
const utils_1 = require("./utils");
let UploadConfiguration = class UploadConfiguration {
    async onReady() {
        const { tmpdir, cleanTimeout } = this.uploadConfig;
        if (tmpdir) {
            await (0, utils_1.ensureDir)(tmpdir);
            if (cleanTimeout) {
                (0, utils_1.autoRemoveUploadTmpFile)(tmpdir, cleanTimeout);
            }
        }
        this.applicationManager
            .getApplications(['koa', 'faas', 'express', 'egg'])
            .forEach(app => {
            app.useMiddleware(middleware_1.UploadMiddleware);
        });
    }
    async onStop() {
        await (0, utils_1.stopAutoRemoveUploadTmpFile)();
    }
};
__decorate([
    (0, core_1.Inject)(),
    __metadata("design:type", core_1.MidwayApplicationManager)
], UploadConfiguration.prototype, "applicationManager", void 0);
__decorate([
    (0, core_1.Config)('upload'),
    __metadata("design:type", Object)
], UploadConfiguration.prototype, "uploadConfig", void 0);
UploadConfiguration = __decorate([
    (0, core_1.Configuration)({
        namespace: 'upload',
        importConfigs: [
            {
                default: DefaultConfig,
            },
        ],
    })
], UploadConfiguration);
exports.UploadConfiguration = UploadConfiguration;
//# sourceMappingURL=configuration.js.map