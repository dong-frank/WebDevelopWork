"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UploadMiddleware = void 0;
const core_1 = require("@midwayjs/core");
const path_1 = require("path");
const fs_1 = require("fs");
const stream_1 = require("stream");
const _1 = require(".");
const parse_1 = require("./parse");
const getRawBody = require("raw-body");
const file_type_1 = require("file-type");
const utils_1 = require("./utils");
const { unlink, writeFile } = fs_1.promises;
let UploadMiddleware = class UploadMiddleware {
    constructor() {
        /**
         * cache global upload white list when uploadConfig.whitelist is set
         * @private
         */
        this.uploadWhiteListMap = new Map();
        /**
         * cache global upload mime type white list when uploadConfig.mimeTypeWhiteList is set
         * @private
         */
        this.uploadFileMimeTypeMap = new Map();
    }
    async init() {
        if (this.uploadConfig.match) {
            this.match = [].concat(this.uploadConfig.match || []);
        }
        else {
            this.ignore = [].concat(this.uploadConfig.ignore || []);
        }
    }
    resolve(app) {
        if (this.uploadConfig.whitelist &&
            Array.isArray(this.uploadConfig.whitelist)) {
            for (const whiteExt of this.uploadConfig.whitelist) {
                this.uploadWhiteListMap.set(whiteExt, whiteExt);
            }
        }
        if (this.uploadConfig.mimeTypeWhiteList) {
            for (const ext in this.uploadConfig.mimeTypeWhiteList) {
                const mime = [].concat(this.uploadConfig.mimeTypeWhiteList[ext]);
                this.uploadFileMimeTypeMap.set(ext, mime);
            }
        }
        if (app.getFrameworkType() === core_1.MidwayFrameworkType.WEB_EXPRESS) {
            return async (req, res, next) => {
                return this.execUpload(req, req, res, next, true);
            };
        }
        else {
            return async (ctx, next) => {
                var _a;
                const req = ((_a = ctx.request) === null || _a === void 0 ? void 0 : _a.req) || ctx.request;
                return this.execUpload(ctx, req, ctx, next, false);
            };
        }
    }
    async execUpload(ctx, req, res, next, isExpress) {
        var _a;
        const { mode, tmpdir, fileSize } = this.uploadConfig;
        const boundary = this.getUploadBoundary(req);
        if (!boundary) {
            return next();
        }
        ctx.fields = {};
        ctx.files = [];
        ctx.cleanupRequestFiles = async () => {
            var _a;
            if (!((_a = ctx.files) === null || _a === void 0 ? void 0 : _a.length)) {
                return [];
            }
            return Promise.all(ctx.files.map(async (fileInfo) => {
                if (typeof fileInfo.data !== 'string') {
                    return false;
                }
                try {
                    await unlink(fileInfo.data);
                    return true;
                }
                catch (_a) {
                    return false;
                }
            }));
        };
        // create new map include custom white list
        const currentContextWhiteListMap = new Map([
            ...this.uploadWhiteListMap.entries(),
        ]);
        if (typeof this.uploadConfig.whitelist === 'function') {
            const whiteListArray = this.uploadConfig.whitelist.call(this, ctx);
            whiteListArray.forEach(ext => currentContextWhiteListMap.set(ext, ext));
        }
        // create new map include custom mime type white list
        const currentContextMimeTypeWhiteListMap = new Map([
            ...this.uploadFileMimeTypeMap.entries(),
        ]);
        if (typeof this.uploadConfig.mimeTypeWhiteList === 'function') {
            const mimeTypeWhiteList = this.uploadConfig.mimeTypeWhiteList.call(this, ctx);
            for (const ext in mimeTypeWhiteList) {
                const mime = [].concat(mimeTypeWhiteList[ext]);
                currentContextMimeTypeWhiteListMap.set(ext, mime);
            }
        }
        let body;
        if (this.isReadableStream(req, isExpress)) {
            if (mode === 'stream') {
                const { fields, fileInfo } = await (0, parse_1.parseFromReadableStream)(req, boundary);
                const ext = this.checkAndGetExt(fileInfo.filename, currentContextWhiteListMap);
                if (!ext) {
                    throw new _1.MultipartInvalidFilenameError(fileInfo.filename);
                }
                else {
                    fileInfo[_1.EXT_KEY] = ext;
                    ctx.fields = fields;
                    ctx.files = [fileInfo];
                    return next();
                }
            }
            body = await getRawBody(req, {
                limit: fileSize,
            });
        }
        else if (((_a = req === null || req === void 0 ? void 0 : req.originEvent) === null || _a === void 0 ? void 0 : _a.body) &&
            (typeof req.originEvent.body === 'string' ||
                Buffer.isBuffer(req.originEvent.body))) {
            body = req.originEvent.body;
        }
        else {
            body = req.body;
        }
        const data = await (0, parse_1.parseMultipart)(body, boundary, this.uploadConfig);
        if (!data) {
            return next();
        }
        ctx.fields = data.fields;
        const requireId = `upload_${Date.now()}.${Math.random()}`;
        const files = data.files;
        for (const fileInfo of files) {
            const ext = this.checkAndGetExt(fileInfo.filename, currentContextWhiteListMap);
            if (!ext) {
                throw new _1.MultipartInvalidFilenameError(fileInfo.filename);
            }
            const { passed, mime, current } = await this.checkFileType(ext, fileInfo.data, currentContextMimeTypeWhiteListMap);
            if (!passed) {
                throw new _1.MultipartInvalidFileTypeError(fileInfo.filename, current, mime);
            }
            fileInfo[_1.EXT_KEY] = ext;
        }
        ctx.files = await Promise.all(files.map(async (file, index) => {
            const { data } = file;
            if (mode === 'file') {
                const ext = file[_1.EXT_KEY];
                const tmpFileName = (0, path_1.resolve)(tmpdir, `${requireId}.${index}${ext}`);
                await writeFile(tmpFileName, data, 'binary');
                file.data = tmpFileName;
            }
            else if (mode === 'stream') {
                file.data = new stream_1.Readable({
                    read() {
                        this.push(data);
                        this.push(null);
                    },
                });
            }
            return file;
        }));
        return next();
    }
    getUploadBoundary(request) {
        var _a;
        const method = (request.method || request.httpMethod || '').toUpperCase();
        if (method !== 'POST' &&
            method !== 'PUT' &&
            method !== 'DELETE' &&
            method !== 'PATCH') {
            return false;
        }
        if (!((_a = request.headers) === null || _a === void 0 ? void 0 : _a['content-type'])) {
            return false;
        }
        const contentType = request.headers['content-type'];
        if (!contentType.startsWith('multipart/form-data;')) {
            return false;
        }
        const boundaryMatch = /boundary=(.*)(;|\s|$)/.exec(contentType);
        if (!(boundaryMatch === null || boundaryMatch === void 0 ? void 0 : boundaryMatch[1])) {
            return false;
        }
        return boundaryMatch[1];
    }
    isReadableStream(req, isExpress) {
        // ref: https://github.com/rvagg/isstream/blob/master/isstream.js#L10
        if (req instanceof stream_1.Stream &&
            typeof req._read === 'function' &&
            typeof req._readableState === 'object' &&
            (!req.body || isExpress)) {
            return true;
        }
        if (req.pipe && req.on && !req.body) {
            return true;
        }
        return false;
    }
    // check extensions
    checkAndGetExt(filename, whiteListMap = this.uploadWhiteListMap) {
        const lowerCaseFileNameList = filename.toLowerCase().split('.');
        while (lowerCaseFileNameList.length) {
            lowerCaseFileNameList.shift();
            const curExt = `.${lowerCaseFileNameList.join('.')}`;
            if (this.uploadConfig.whitelist === null) {
                return (0, utils_1.formatExt)(curExt);
            }
            if (whiteListMap.has(curExt)) {
                // Avoid the presence of hidden characters and return extensions in the white list.
                return whiteListMap.get(curExt);
            }
        }
        return false;
    }
    // check file-type
    async checkFileType(ext, data, uploadFileMimeTypeMap = this.uploadFileMimeTypeMap) {
        // fileType == null, pass check
        if (!this.uploadConfig.mimeTypeWhiteList) {
            return { passed: true };
        }
        const mime = uploadFileMimeTypeMap.get(ext);
        if (!mime) {
            return { passed: false, mime: ext };
        }
        if (!mime.length) {
            return { passed: true };
        }
        const typeInfo = await (0, file_type_1.fromBuffer)(data);
        if (!typeInfo) {
            return { passed: false, mime: mime.join('、') };
        }
        const findMime = mime.find(mimeItem => mimeItem === typeInfo.mime);
        return {
            passed: !!findMime,
            mime: mime.join('、'),
            current: typeInfo.mime,
        };
    }
    static getName() {
        return 'upload';
    }
};
__decorate([
    (0, core_1.Config)('upload'),
    __metadata("design:type", Object)
], UploadMiddleware.prototype, "uploadConfig", void 0);
__decorate([
    (0, core_1.Logger)(),
    __metadata("design:type", Object)
], UploadMiddleware.prototype, "logger", void 0);
__decorate([
    (0, core_1.Init)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], UploadMiddleware.prototype, "init", null);
UploadMiddleware = __decorate([
    (0, core_1.Middleware)()
], UploadMiddleware);
exports.UploadMiddleware = UploadMiddleware;
//# sourceMappingURL=middleware.js.map