"use strict";
exports.__esModule = true;
exports.EntryGenerator = exports.isWithin = void 0;
var path_1 = require("path");
var core_1 = require("@midwayjs/core");
var glob_1 = require("@midwayjs/glob");
var fs_1 = require("fs");
var ts = require("typescript");
var os = require("os");
function formatWindowsPath(p) {
    if (os.platform() === 'win32' && p) {
        return p.split(path_1.sep).join(path_1.posix.sep);
    }
    return p;
}
var defaultEntryGeneratorOptions = {
    baseUrl: process.cwd(),
    rootDir: 'src'
};
var isWithin = function (parent, child) {
    parent = (0, path_1.normalize)(parent);
    child = (0, path_1.normalize)(child);
    var r = (0, path_1.relative)(parent, child);
    return !(0, path_1.isAbsolute)(r) && !r.startsWith('..');
};
exports.isWithin = isWithin;
var EntryGenerator = /** @class */ (function () {
    function EntryGenerator(options) {
        this.isESM = false;
        this.DEFAULT_PATTERN = ['**/**.ts', '**/**.tsx', '**/**.js'];
        this.DEFAULT_IGNORE_PATTERN = [
            '**/**.d.ts',
            '**/logs/**',
            '**/run/**',
            '**/app/extend/**',
            '**/node_modules/**',
            '**/**.test.ts',
            '**/**.test.js',
            '**/__test__/**',
            '*/index.ts',
        ];
        this.BANNER = '/** This file generated by @midwayjs/bundle-helper */\n\r';
        this.preset(options);
    }
    // init
    EntryGenerator.prototype.preset = function (options) {
        var _a;
        options = Object.assign({}, defaultEntryGeneratorOptions, options);
        var baseUrl = options.baseUrl;
        var projectConfig = (0, core_1.safeRequire)((0, path_1.resolve)(baseUrl, 'tsconfig'));
        var srcDir = (_a = (0, core_1.safelyGet)('compilerOptions.rootDir', projectConfig)) !== null && _a !== void 0 ? _a : options.rootDir;
        if (!(0, fs_1.existsSync)((0, path_1.resolve)(baseUrl, 'tsconfig.json'))) {
            throw new Error('Not found tsconfig.json bundle-helper only supports typescript');
        }
        var pkg = (0, core_1.safeRequire)((0, path_1.resolve)(baseUrl, 'package.json'));
        if ((pkg === null || pkg === void 0 ? void 0 : pkg.type) === 'module') {
            this.isESM = true;
        }
        this.sourceDir = (0, path_1.resolve)(baseUrl, srcDir);
        this.programFiles = (0, glob_1.run)(this.DEFAULT_PATTERN.concat(options.pattern || []), {
            cwd: this.sourceDir,
            ignore: this.DEFAULT_IGNORE_PATTERN.concat(options.ignore || [])
        });
        this.program = ts.createProgram(this.programFiles, {
            target: ts.ScriptTarget.Latest,
            rootDir: this.sourceDir
        });
        this.typeChecker = this.program.getTypeChecker();
    };
    EntryGenerator.prototype.visit = function (node, collection) {
        var _this = this;
        if (ts.isClassDeclaration(node)) {
            var decorators = void 0;
            if (node['decorators']) {
                decorators = node['decorators'];
            }
            else if (ts['canHaveDecorators']) {
                decorators = ts['canHaveDecorators'](node)
                    ? ts['getDecorators'](node)
                    : undefined;
            }
            decorators === null || decorators === void 0 ? void 0 : decorators.forEach(function (decorator) {
                var symbol = _this.typeChecker.getSymbolAtLocation(decorator.expression.getFirstToken());
                if ((symbol === null || symbol === void 0 ? void 0 : symbol.getName()) === 'Configuration') {
                    collection.configurationClz = node.name.text;
                    collection.configurationFilepath = node.getSourceFile().fileName;
                }
            });
        }
        else if (ts.isModuleDeclaration(node)) {
            ts.forEachChild(node, function (n) { return _this.visit(n, collection); });
        }
    };
    EntryGenerator.prototype.collect = function () {
        var _this = this;
        var _a;
        var collection = {
            exportFiles: []
        };
        for (var _i = 0, _b = this.program.getSourceFiles(); _i < _b.length; _i++) {
            var sourceFile = _b[_i];
            var filename = sourceFile.fileName;
            if (!(0, exports.isWithin)(this.sourceDir, filename))
                continue;
            var sourceExports = (_a = this.typeChecker.getSymbolAtLocation(sourceFile)) === null || _a === void 0 ? void 0 : _a.exports;
            if (!!sourceExports && sourceExports.size > 0) {
                if (!collection.exportFiles.includes(filename)) {
                    collection.exportFiles.push(filename);
                }
            }
            ts.forEachChild(sourceFile, function (node) { return _this.visit(node, collection); });
        }
        return collection;
    };
    EntryGenerator.prototype.run = function () {
        var _this = this;
        var collection = this.collect();
        var exportCodes = collection.exportFiles
            .filter(function (path) { return (0, path_1.relative)(collection.configurationFilepath, path) !== ''; })
            .map(function (path) {
            return "export * from './".concat(formatWindowsPath((0, path_1.relative)(_this.sourceDir, path))
                .replace((0, path_1.extname)(path), _this.isESM ? '.js' : '')
                .replace(/\\/g, '/'), "';\n");
        });
        exportCodes.unshift("export { ".concat(collection.configurationClz, " as Configuration } from './").concat(formatWindowsPath((0, path_1.relative)(this.sourceDir, collection.configurationFilepath)).replace((0, path_1.extname)(collection.configurationFilepath), this.isESM ? '.js' : ''), "';\n"));
        exportCodes.unshift(this.BANNER);
        (0, fs_1.writeFileSync)((0, path_1.resolve)(this.sourceDir, 'index.ts'), exportCodes.join(''));
    };
    return EntryGenerator;
}());
exports.EntryGenerator = EntryGenerator;
